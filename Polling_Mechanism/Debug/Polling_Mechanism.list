
Polling_Mechanism.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001c58  08001c58  00011c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c80  08001c80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c80  08001c80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c80  08001c80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c80  08001c80  00011c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c84  08001c84  00011c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000000c  08001c94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08001c94  00020054  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004709  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000116a  00000000  00000000  0002473e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000538  00000000  00000000  000258a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004a0  00000000  00000000  00025de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e9b  00000000  00000000  00026280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005955  00000000  00000000  0003c11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e385  00000000  00000000  00041a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bfdf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013a8  00000000  00000000  000bfe48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001c40 	.word	0x08001c40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001c40 	.word	0x08001c40

0800014c <can_tx>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void can_tx (uint32_t ID , uint8_t DLC , uint8_t* payload)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	; 0x30
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	460b      	mov	r3, r1
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	72fb      	strb	r3, [r7, #11]
	uint8_t pRxMailbox , no_free_txMailbox =0 ;
 800015a:	2300      	movs	r3, #0
 800015c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	CAN_TxHeaderTypeDef pHeader;

	pHeader.DLC = DLC;
 8000160:	7afb      	ldrb	r3, [r7, #11]
 8000162:	627b      	str	r3, [r7, #36]	; 0x24
	pHeader.IDE = CAN_ID_STD;
 8000164:	2300      	movs	r3, #0
 8000166:	61fb      	str	r3, [r7, #28]
	pHeader.RTR = CAN_RTR_DATA;
 8000168:	2300      	movs	r3, #0
 800016a:	623b      	str	r3, [r7, #32]
	pHeader.StdId = ID;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	617b      	str	r3, [r7, #20]

	no_free_txMailbox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan);
 8000170:	4812      	ldr	r0, [pc, #72]	; (80001bc <can_tx+0x70>)
 8000172:	f000 fd59 	bl	8000c28 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000176:	4603      	mov	r3, r0
 8000178:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (no_free_txMailbox)
 800017c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000180:	2b00      	cmp	r3, #0
 8000182:	d016      	beq.n	80001b2 <can_tx+0x66>
	{
		if ( HAL_CAN_AddTxMessage (&hcan , &pHeader , payload , &pRxMailbox) != HAL_OK)
 8000184:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000188:	f107 0114 	add.w	r1, r7, #20
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	480b      	ldr	r0, [pc, #44]	; (80001bc <can_tx+0x70>)
 8000190:	f000 fc70 	bl	8000a74 <HAL_CAN_AddTxMessage>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d001      	beq.n	800019e <can_tx+0x52>
		{
			Error_Handler();
 800019a:	f000 f929 	bl	80003f0 <Error_Handler>
		}

		while (HAL_CAN_IsTxMessagePending (&hcan , pRxMailbox));
 800019e:	bf00      	nop
 80001a0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80001a4:	4619      	mov	r1, r3
 80001a6:	4805      	ldr	r0, [pc, #20]	; (80001bc <can_tx+0x70>)
 80001a8:	f000 fd72 	bl	8000c90 <HAL_CAN_IsTxMessagePending>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d1f6      	bne.n	80001a0 <can_tx+0x54>
	}

}
 80001b2:	bf00      	nop
 80001b4:	3730      	adds	r7, #48	; 0x30
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	20000028 	.word	0x20000028

080001c0 <CAN_RX_FILTER_init>:


void CAN_RX_FILTER_init (uint16_t STD_FILTER_ID , uint16_t STD_FILTER_MASK)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b08c      	sub	sp, #48	; 0x30
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	4603      	mov	r3, r0
 80001c8:	460a      	mov	r2, r1
 80001ca:	80fb      	strh	r3, [r7, #6]
 80001cc:	4613      	mov	r3, r2
 80001ce:	80bb      	strh	r3, [r7, #4]
	CAN_FilterTypeDef sFILTERCONFIG;

	sFILTERCONFIG.FilterActivation = CAN_FILTER_ENABLE;
 80001d0:	2301      	movs	r3, #1
 80001d2:	62bb      	str	r3, [r7, #40]	; 0x28
	sFILTERCONFIG.FilterBank = 0;
 80001d4:	2300      	movs	r3, #0
 80001d6:	61fb      	str	r3, [r7, #28]
	sFILTERCONFIG.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001d8:	2300      	movs	r3, #0
 80001da:	61bb      	str	r3, [r7, #24]
	sFILTERCONFIG.FilterIdHigh = STD_FILTER_ID <<5;
 80001dc:	88fb      	ldrh	r3, [r7, #6]
 80001de:	015b      	lsls	r3, r3, #5
 80001e0:	60bb      	str	r3, [r7, #8]
	sFILTERCONFIG.FilterIdLow = 0x0000;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
	sFILTERCONFIG.FilterMaskIdHigh = STD_FILTER_MASK << 5;
 80001e6:	88bb      	ldrh	r3, [r7, #4]
 80001e8:	015b      	lsls	r3, r3, #5
 80001ea:	613b      	str	r3, [r7, #16]
	sFILTERCONFIG.FilterMaskIdLow = 0x0000;
 80001ec:	2300      	movs	r3, #0
 80001ee:	617b      	str	r3, [r7, #20]
	sFILTERCONFIG.FilterMode = CAN_FILTERMODE_IDMASK;
 80001f0:	2300      	movs	r3, #0
 80001f2:	623b      	str	r3, [r7, #32]
	sFILTERCONFIG.FilterScale = CAN_FILTERSCALE_32BIT;
 80001f4:	2301      	movs	r3, #1
 80001f6:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter (&hcan , &sFILTERCONFIG) != HAL_OK)
 80001f8:	f107 0308 	add.w	r3, r7, #8
 80001fc:	4619      	mov	r1, r3
 80001fe:	4806      	ldr	r0, [pc, #24]	; (8000218 <CAN_RX_FILTER_init+0x58>)
 8000200:	f000 fb2b 	bl	800085a <HAL_CAN_ConfigFilter>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <CAN_RX_FILTER_init+0x4e>
	{
		Error_Handler();
 800020a:	f000 f8f1 	bl	80003f0 <Error_Handler>
	}

}
 800020e:	bf00      	nop
 8000210:	3730      	adds	r7, #48	; 0x30
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	20000028 	.word	0x20000028

0800021c <can_rx>:



void can_rx (uint32_t* ID , uint8_t* DLC , uint8_t* payload)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b08c      	sub	sp, #48	; 0x30
 8000220:	af00      	add	r7, sp, #0
 8000222:	60f8      	str	r0, [r7, #12]
 8000224:	60b9      	str	r1, [r7, #8]
 8000226:	607a      	str	r2, [r7, #4]
	CAN_RxHeaderTypeDef pHeader ;

	while (HAL_CAN_GetRxFifoFillLevel(&hcan , CAN_FILTER_FIFO0) == 0);
 8000228:	bf00      	nop
 800022a:	2100      	movs	r1, #0
 800022c:	480e      	ldr	r0, [pc, #56]	; (8000268 <can_rx+0x4c>)
 800022e:	f000 fe63 	bl	8000ef8 <HAL_CAN_GetRxFifoFillLevel>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d0f8      	beq.n	800022a <can_rx+0xe>

	if (HAL_CAN_GetRxMessage (&hcan , CAN_FILTER_FIFO0 , &pHeader , payload ) != HAL_OK)
 8000238:	f107 0214 	add.w	r2, r7, #20
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2100      	movs	r1, #0
 8000240:	4809      	ldr	r0, [pc, #36]	; (8000268 <can_rx+0x4c>)
 8000242:	f000 fd48 	bl	8000cd6 <HAL_CAN_GetRxMessage>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <can_rx+0x34>
	{
		Error_Handler();
 800024c:	f000 f8d0 	bl	80003f0 <Error_Handler>
	}

	*ID = pHeader.StdId;
 8000250:	697a      	ldr	r2, [r7, #20]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	601a      	str	r2, [r3, #0]
	*DLC = pHeader.DLC;
 8000256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000258:	b2da      	uxtb	r2, r3
 800025a:	68bb      	ldr	r3, [r7, #8]
 800025c:	701a      	strb	r2, [r3, #0]
}
 800025e:	bf00      	nop
 8000260:	3730      	adds	r7, #48	; 0x30
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000028 	.word	0x20000028

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000272:	f000 f995 	bl	80005a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000276:	f000 f833 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027a:	f000 f8a3 	bl	80003c4 <MX_GPIO_Init>
  MX_CAN_Init();
 800027e:	f000 f86b 	bl	8000358 <MX_CAN_Init>

  CAN_RX_FILTER_init (0x3FF , 0x7FF);
 8000282:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000286:	f240 30ff 	movw	r0, #1023	; 0x3ff
 800028a:	f7ff ff99 	bl	80001c0 <CAN_RX_FILTER_init>
  /* USER CODE BEGIN 2 */


  if (HAL_CAN_Start(&hcan) != HAL_OK)
 800028e:	4812      	ldr	r0, [pc, #72]	; (80002d8 <main+0x6c>)
 8000290:	f000 fbac 	bl	80009ec <HAL_CAN_Start>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <main+0x32>
  {
	  Error_Handler();
 800029a:	f000 f8a9 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE END 2 */

  uint8_t TX_DATA[8] = {'C', 'A' , 'N' , ' ' , 'N' , 'O' , ':' , ' '};
 800029e:	4a0f      	ldr	r2, [pc, #60]	; (80002dc <main+0x70>)
 80002a0:	f107 030c 	add.w	r3, r7, #12
 80002a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002a8:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t Frameno = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	75fb      	strb	r3, [r7, #23]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TX_DATA[8] = Frameno++;
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	1c5a      	adds	r2, r3, #1
 80002b4:	75fa      	strb	r2, [r7, #23]
 80002b6:	753b      	strb	r3, [r7, #20]

	  can_tx(0x3ff , 8 ,TX_DATA);
 80002b8:	f107 030c 	add.w	r3, r7, #12
 80002bc:	461a      	mov	r2, r3
 80002be:	2108      	movs	r1, #8
 80002c0:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80002c4:	f7ff ff42 	bl	800014c <can_tx>


	  can_rx (&canid , &candlc , RX_DATA);
 80002c8:	1d3a      	adds	r2, r7, #4
 80002ca:	4639      	mov	r1, r7
 80002cc:	1cbb      	adds	r3, r7, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f7ff ffa4 	bl	800021c <can_rx>
	  TX_DATA[8] = Frameno++;
 80002d4:	e7ec      	b.n	80002b0 <main+0x44>
 80002d6:	bf00      	nop
 80002d8:	20000028 	.word	0x20000028
 80002dc:	08001c58 	.word	0x08001c58

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b090      	sub	sp, #64	; 0x40
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	2228      	movs	r2, #40	; 0x28
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fc9e 	bl	8001c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000302:	2302      	movs	r3, #2
 8000304:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000306:	2301      	movs	r3, #1
 8000308:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030a:	2310      	movs	r3, #16
 800030c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800030e:	2300      	movs	r3, #0
 8000310:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0318 	add.w	r3, r7, #24
 8000316:	4618      	mov	r0, r3
 8000318:	f001 f87e 	bl	8001418 <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000322:	f000 f865 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800032a:	2300      	movs	r3, #0
 800032c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f001 faec 	bl	800191c <HAL_RCC_ClockConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800034a:	f000 f851 	bl	80003f0 <Error_Handler>
  }
}
 800034e:	bf00      	nop
 8000350:	3740      	adds	r7, #64	; 0x40
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800035c:	4b17      	ldr	r3, [pc, #92]	; (80003bc <MX_CAN_Init+0x64>)
 800035e:	4a18      	ldr	r2, [pc, #96]	; (80003c0 <MX_CAN_Init+0x68>)
 8000360:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <MX_CAN_Init+0x64>)
 8000364:	2201      	movs	r2, #1
 8000366:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000368:	4b14      	ldr	r3, [pc, #80]	; (80003bc <MX_CAN_Init+0x64>)
 800036a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800036e:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000370:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_CAN_Init+0x64>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <MX_CAN_Init+0x64>)
 8000378:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800037c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_CAN_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <MX_CAN_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_CAN_Init+0x64>)
 800038c:	2200      	movs	r2, #0
 800038e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <MX_CAN_Init+0x64>)
 8000392:	2200      	movs	r2, #0
 8000394:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_CAN_Init+0x64>)
 8000398:	2201      	movs	r2, #1
 800039a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <MX_CAN_Init+0x64>)
 800039e:	2200      	movs	r2, #0
 80003a0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_CAN_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <MX_CAN_Init+0x64>)
 80003aa:	f000 f95b 	bl	8000664 <HAL_CAN_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80003b4:	f000 f81c 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000028 	.word	0x20000028
 80003c0:	40006400 	.word	0x40006400

080003c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ca:	4b08      	ldr	r3, [pc, #32]	; (80003ec <MX_GPIO_Init+0x28>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a07      	ldr	r2, [pc, #28]	; (80003ec <MX_GPIO_Init+0x28>)
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	6193      	str	r3, [r2, #24]
 80003d6:	4b05      	ldr	r3, [pc, #20]	; (80003ec <MX_GPIO_Init+0x28>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f003 0304 	and.w	r3, r3, #4
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40021000 	.word	0x40021000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a14      	ldr	r2, [pc, #80]	; (8000458 <HAL_MspInit+0x5c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x5c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <HAL_MspInit+0x60>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_MspInit+0x60>)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <HAL_CAN_MspInit+0x8c>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d131      	bne.n	80004e4 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000480:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <HAL_CAN_MspInit+0x90>)
 8000482:	69db      	ldr	r3, [r3, #28]
 8000484:	4a1a      	ldr	r2, [pc, #104]	; (80004f0 <HAL_CAN_MspInit+0x90>)
 8000486:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048a:	61d3      	str	r3, [r2, #28]
 800048c:	4b18      	ldr	r3, [pc, #96]	; (80004f0 <HAL_CAN_MspInit+0x90>)
 800048e:	69db      	ldr	r3, [r3, #28]
 8000490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <HAL_CAN_MspInit+0x90>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <HAL_CAN_MspInit+0x90>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b12      	ldr	r3, [pc, #72]	; (80004f0 <HAL_CAN_MspInit+0x90>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80004b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	480b      	ldr	r0, [pc, #44]	; (80004f4 <HAL_CAN_MspInit+0x94>)
 80004c6:	f000 fe23 	bl	8001110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d0:	2302      	movs	r3, #2
 80004d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004d4:	2303      	movs	r3, #3
 80004d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <HAL_CAN_MspInit+0x94>)
 80004e0:	f000 fe16 	bl	8001110 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80004e4:	bf00      	nop
 80004e6:	3720      	adds	r7, #32
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40006400 	.word	0x40006400
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010800 	.word	0x40010800

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <NMI_Handler+0x4>

080004fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fe:	b480      	push	{r7}
 8000500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000502:	e7fe      	b.n	8000502 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	e7fe      	b.n	8000508 <MemManage_Handler+0x4>

0800050a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050a:	b480      	push	{r7}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800050e:	e7fe      	b.n	800050e <BusFault_Handler+0x4>

08000510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000514:	e7fe      	b.n	8000514 <UsageFault_Handler+0x4>

08000516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000516:	b480      	push	{r7}
 8000518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051a:	bf00      	nop
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr

08000522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr

0800052e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	bc80      	pop	{r7}
 8000538:	4770      	bx	lr

0800053a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053e:	f000 f875 	bl	800062c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000542:	bf00      	nop
 8000544:	bd80      	pop	{r7, pc}

08000546 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
	...

08000554 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000556:	490d      	ldr	r1, [pc, #52]	; (800058c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000558:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800056c:	4c0a      	ldr	r4, [pc, #40]	; (8000598 <LoopFillZerobss+0x22>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057a:	f7ff ffe4 	bl	8000546 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057e:	f001 fb33 	bl	8001be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000582:	f7ff fe73 	bl	800026c <main>
  bx lr
 8000586:	4770      	bx	lr
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000590:	08001c88 	.word	0x08001c88
  ldr r2, =_sbss
 8000594:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000598:	20000054 	.word	0x20000054

0800059c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC1_2_IRQHandler>
	...

080005a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <HAL_Init+0x28>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <HAL_Init+0x28>)
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b0:	2003      	movs	r0, #3
 80005b2:	f000 fd79 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b6:	200f      	movs	r0, #15
 80005b8:	f000 f808 	bl	80005cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005bc:	f7ff ff1e 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40022000 	.word	0x40022000

080005cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <HAL_InitTick+0x54>)
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	4b12      	ldr	r3, [pc, #72]	; (8000624 <HAL_InitTick+0x58>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	4619      	mov	r1, r3
 80005de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 fd83 	bl	80010f6 <HAL_SYSTICK_Config>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e00e      	b.n	8000618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b0f      	cmp	r3, #15
 80005fe:	d80a      	bhi.n	8000616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000600:	2200      	movs	r2, #0
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000608:	f000 fd59 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800060c:	4a06      	ldr	r2, [pc, #24]	; (8000628 <HAL_InitTick+0x5c>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000612:	2300      	movs	r3, #0
 8000614:	e000      	b.n	8000618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000616:	2301      	movs	r3, #1
}
 8000618:	4618      	mov	r0, r3
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000000 	.word	0x20000000
 8000624:	20000008 	.word	0x20000008
 8000628:	20000004 	.word	0x20000004

0800062c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_IncTick+0x1c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_IncTick+0x20>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4413      	add	r3, r2
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x20>)
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	20000008 	.word	0x20000008
 800064c:	20000050 	.word	0x20000050

08000650 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <HAL_GetTick+0x10>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000050 	.word	0x20000050

08000664 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d101      	bne.n	8000676 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	e0ed      	b.n	8000852 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d102      	bne.n	8000688 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f7ff feec 	bl	8000460 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f042 0201 	orr.w	r2, r2, #1
 8000696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000698:	f7ff ffda 	bl	8000650 <HAL_GetTick>
 800069c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800069e:	e012      	b.n	80006c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006a0:	f7ff ffd6 	bl	8000650 <HAL_GetTick>
 80006a4:	4602      	mov	r2, r0
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	2b0a      	cmp	r3, #10
 80006ac:	d90b      	bls.n	80006c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2205      	movs	r2, #5
 80006be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e0c5      	b.n	8000852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	f003 0301 	and.w	r3, r3, #1
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0e5      	beq.n	80006a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f022 0202 	bic.w	r2, r2, #2
 80006e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006e4:	f7ff ffb4 	bl	8000650 <HAL_GetTick>
 80006e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006ea:	e012      	b.n	8000712 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006ec:	f7ff ffb0 	bl	8000650 <HAL_GetTick>
 80006f0:	4602      	mov	r2, r0
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	2b0a      	cmp	r3, #10
 80006f8:	d90b      	bls.n	8000712 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2205      	movs	r2, #5
 800070a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e09f      	b.n	8000852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f003 0302 	and.w	r3, r3, #2
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1e5      	bne.n	80006ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7e1b      	ldrb	r3, [r3, #24]
 8000724:	2b01      	cmp	r3, #1
 8000726:	d108      	bne.n	800073a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	e007      	b.n	800074a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000748:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7e5b      	ldrb	r3, [r3, #25]
 800074e:	2b01      	cmp	r3, #1
 8000750:	d108      	bne.n	8000764 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	e007      	b.n	8000774 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000772:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7e9b      	ldrb	r3, [r3, #26]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d108      	bne.n	800078e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f042 0220 	orr.w	r2, r2, #32
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	e007      	b.n	800079e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f022 0220 	bic.w	r2, r2, #32
 800079c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7edb      	ldrb	r3, [r3, #27]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d108      	bne.n	80007b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f022 0210 	bic.w	r2, r2, #16
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	e007      	b.n	80007c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f042 0210 	orr.w	r2, r2, #16
 80007c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7f1b      	ldrb	r3, [r3, #28]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d108      	bne.n	80007e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f042 0208 	orr.w	r2, r2, #8
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	e007      	b.n	80007f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f022 0208 	bic.w	r2, r2, #8
 80007f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7f5b      	ldrb	r3, [r3, #29]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d108      	bne.n	800080c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f042 0204 	orr.w	r2, r2, #4
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	e007      	b.n	800081c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f022 0204 	bic.w	r2, r2, #4
 800081a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689a      	ldr	r2, [r3, #8]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	431a      	orrs	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	431a      	orrs	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	ea42 0103 	orr.w	r1, r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	1e5a      	subs	r2, r3, #1
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	430a      	orrs	r2, r1
 8000840:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2201      	movs	r2, #1
 800084c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800085a:	b480      	push	{r7}
 800085c:	b087      	sub	sp, #28
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000870:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000872:	7cfb      	ldrb	r3, [r7, #19]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d003      	beq.n	8000880 <HAL_CAN_ConfigFilter+0x26>
 8000878:	7cfb      	ldrb	r3, [r7, #19]
 800087a:	2b02      	cmp	r3, #2
 800087c:	f040 80aa 	bne.w	80009d4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000886:	f043 0201 	orr.w	r2, r3, #1
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	2201      	movs	r2, #1
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	43db      	mvns	r3, r3
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d123      	bne.n	8000902 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	43db      	mvns	r3, r3
 80008c4:	401a      	ands	r2, r3
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3248      	adds	r2, #72	; 0x48
 80008e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008f8:	6979      	ldr	r1, [r7, #20]
 80008fa:	3348      	adds	r3, #72	; 0x48
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	440b      	add	r3, r1
 8000900:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d122      	bne.n	8000950 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	431a      	orrs	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800092a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	3248      	adds	r2, #72	; 0x48
 8000930:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000944:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000946:	6979      	ldr	r1, [r7, #20]
 8000948:	3348      	adds	r3, #72	; 0x48
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	440b      	add	r3, r1
 800094e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d109      	bne.n	800096c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	43db      	mvns	r3, r3
 8000962:	401a      	ands	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800096a:	e007      	b.n	800097c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	431a      	orrs	r2, r3
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	691b      	ldr	r3, [r3, #16]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d109      	bne.n	8000998 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	43db      	mvns	r3, r3
 800098e:	401a      	ands	r2, r3
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000996:	e007      	b.n	80009a8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	431a      	orrs	r2, r3
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	6a1b      	ldr	r3, [r3, #32]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d107      	bne.n	80009c0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	431a      	orrs	r2, r3
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009c6:	f023 0201 	bic.w	r2, r3, #1
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	e006      	b.n	80009e2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
  }
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	371c      	adds	r7, #28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d12e      	bne.n	8000a5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2202      	movs	r2, #2
 8000a04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f022 0201 	bic.w	r2, r2, #1
 8000a16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a18:	f7ff fe1a 	bl	8000650 <HAL_GetTick>
 8000a1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a1e:	e012      	b.n	8000a46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a20:	f7ff fe16 	bl	8000650 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	2b0a      	cmp	r3, #10
 8000a2c:	d90b      	bls.n	8000a46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2205      	movs	r2, #5
 8000a3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e012      	b.n	8000a6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1e5      	bne.n	8000a20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e006      	b.n	8000a6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
  }
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
 8000a80:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a88:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a92:	7ffb      	ldrb	r3, [r7, #31]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d003      	beq.n	8000aa0 <HAL_CAN_AddTxMessage+0x2c>
 8000a98:	7ffb      	ldrb	r3, [r7, #31]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	f040 80b8 	bne.w	8000c10 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10a      	bne.n	8000ac0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d105      	bne.n	8000ac0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 80a0 	beq.w	8000c00 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	0e1b      	lsrs	r3, r3, #24
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d907      	bls.n	8000ae0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	e09e      	b.n	8000c1e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	409a      	lsls	r2, r3
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d10d      	bne.n	8000b0e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000afc:	68f9      	ldr	r1, [r7, #12]
 8000afe:	6809      	ldr	r1, [r1, #0]
 8000b00:	431a      	orrs	r2, r3
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	3318      	adds	r3, #24
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	440b      	add	r3, r1
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	e00f      	b.n	8000b2e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b18:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b1e:	68f9      	ldr	r1, [r7, #12]
 8000b20:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000b22:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3318      	adds	r3, #24
 8000b28:	011b      	lsls	r3, r3, #4
 8000b2a:	440b      	add	r3, r1
 8000b2c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6819      	ldr	r1, [r3, #0]
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3318      	adds	r3, #24
 8000b3a:	011b      	lsls	r3, r3, #4
 8000b3c:	440b      	add	r3, r1
 8000b3e:	3304      	adds	r3, #4
 8000b40:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	7d1b      	ldrb	r3, [r3, #20]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d111      	bne.n	8000b6e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3318      	adds	r3, #24
 8000b52:	011b      	lsls	r3, r3, #4
 8000b54:	4413      	add	r3, r2
 8000b56:	3304      	adds	r3, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	6811      	ldr	r1, [r2, #0]
 8000b5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3318      	adds	r3, #24
 8000b66:	011b      	lsls	r3, r3, #4
 8000b68:	440b      	add	r3, r1
 8000b6a:	3304      	adds	r3, #4
 8000b6c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3307      	adds	r3, #7
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	061a      	lsls	r2, r3, #24
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3306      	adds	r3, #6
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	041b      	lsls	r3, r3, #16
 8000b7e:	431a      	orrs	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3305      	adds	r3, #5
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	021b      	lsls	r3, r3, #8
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	3204      	adds	r2, #4
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	4610      	mov	r0, r2
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	6811      	ldr	r1, [r2, #0]
 8000b96:	ea43 0200 	orr.w	r2, r3, r0
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	011b      	lsls	r3, r3, #4
 8000b9e:	440b      	add	r3, r1
 8000ba0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000ba4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3303      	adds	r3, #3
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	061a      	lsls	r2, r3, #24
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	041b      	lsls	r3, r3, #16
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	021b      	lsls	r3, r3, #8
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	6811      	ldr	r1, [r2, #0]
 8000bcc:	ea43 0200 	orr.w	r2, r3, r0
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	440b      	add	r3, r1
 8000bd6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000bda:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	3318      	adds	r3, #24
 8000be4:	011b      	lsls	r3, r3, #4
 8000be6:	4413      	add	r3, r2
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	6811      	ldr	r1, [r2, #0]
 8000bee:	f043 0201 	orr.w	r2, r3, #1
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3318      	adds	r3, #24
 8000bf6:	011b      	lsls	r3, r3, #4
 8000bf8:	440b      	add	r3, r1
 8000bfa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e00e      	b.n	8000c1e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e006      	b.n	8000c1e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c14:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c1c:	2301      	movs	r3, #1
  }
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c3a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c3c:	7afb      	ldrb	r3, [r7, #11]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d002      	beq.n	8000c48 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000c42:	7afb      	ldrb	r3, [r7, #11]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d11d      	bne.n	8000c84 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d002      	beq.n	8000c5c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000c84:	68fb      	ldr	r3, [r7, #12]
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca4:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ca6:	7afb      	ldrb	r3, [r7, #11]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d002      	beq.n	8000cb2 <HAL_CAN_IsTxMessagePending+0x22>
 8000cac:	7afb      	ldrb	r3, [r7, #11]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d10b      	bne.n	8000cca <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	689a      	ldr	r2, [r3, #8]
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	069b      	lsls	r3, r3, #26
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	069b      	lsls	r3, r3, #26
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d001      	beq.n	8000cca <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cea:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d003      	beq.n	8000cfa <HAL_CAN_GetRxMessage+0x24>
 8000cf2:	7dfb      	ldrb	r3, [r7, #23]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	f040 80f3 	bne.w	8000ee0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d10e      	bne.n	8000d1e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d116      	bne.n	8000d3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e0e7      	b.n	8000eee <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d107      	bne.n	8000d3c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e0d8      	b.n	8000eee <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	331b      	adds	r3, #27
 8000d44:	011b      	lsls	r3, r3, #4
 8000d46:	4413      	add	r3, r2
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0204 	and.w	r2, r3, #4
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d10c      	bne.n	8000d74 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	331b      	adds	r3, #27
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4413      	add	r3, r2
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	0d5b      	lsrs	r3, r3, #21
 8000d6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e00b      	b.n	8000d8c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	331b      	adds	r3, #27
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	4413      	add	r3, r2
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	08db      	lsrs	r3, r3, #3
 8000d84:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	331b      	adds	r3, #27
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	4413      	add	r3, r2
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f003 0202 	and.w	r2, r3, #2
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	331b      	adds	r3, #27
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	4413      	add	r3, r2
 8000dae:	3304      	adds	r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 020f 	and.w	r2, r3, #15
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	331b      	adds	r3, #27
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	4413      	add	r3, r2
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	0a1b      	lsrs	r3, r3, #8
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	331b      	adds	r3, #27
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	4413      	add	r3, r2
 8000dde:	3304      	adds	r3, #4
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	0c1b      	lsrs	r3, r3, #16
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	4413      	add	r3, r2
 8000df4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	4413      	add	r3, r2
 8000e0a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	0a1a      	lsrs	r2, r3, #8
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	4413      	add	r3, r2
 8000e24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	0c1a      	lsrs	r2, r3, #16
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	3302      	adds	r3, #2
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	4413      	add	r3, r2
 8000e3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0e1a      	lsrs	r2, r3, #24
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	3303      	adds	r3, #3
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	4413      	add	r3, r2
 8000e58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	3304      	adds	r3, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	4413      	add	r3, r2
 8000e70:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	0a1a      	lsrs	r2, r3, #8
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	3305      	adds	r3, #5
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	4413      	add	r3, r2
 8000e8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	0c1a      	lsrs	r2, r3, #16
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	3306      	adds	r3, #6
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	0e1a      	lsrs	r2, r3, #24
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	3307      	adds	r3, #7
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d108      	bne.n	8000ecc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f042 0220 	orr.w	r2, r2, #32
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	e007      	b.n	8000edc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f042 0220 	orr.w	r2, r2, #32
 8000eda:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	e006      	b.n	8000eee <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
  }
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	371c      	adds	r7, #28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f0c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f0e:	7afb      	ldrb	r3, [r7, #11]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d002      	beq.n	8000f1a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8000f14:	7afb      	ldrb	r3, [r7, #11]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d10f      	bne.n	8000f3a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d106      	bne.n	8000f2e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	e005      	b.n	8000f3a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
	...

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001088:	f7ff ff90 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff49 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff5e 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff90 	bl	8001000 <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5f 	bl	8000fac <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffb0 	bl	8001064 <SysTick_Config>
 8001104:	4603      	mov	r3, r0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b08b      	sub	sp, #44	; 0x2c
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001122:	e169      	b.n	80013f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001124:	2201      	movs	r2, #1
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	69fa      	ldr	r2, [r7, #28]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	429a      	cmp	r2, r3
 800113e:	f040 8158 	bne.w	80013f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4a9a      	ldr	r2, [pc, #616]	; (80013b0 <HAL_GPIO_Init+0x2a0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d05e      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 800114c:	4a98      	ldr	r2, [pc, #608]	; (80013b0 <HAL_GPIO_Init+0x2a0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d875      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 8001152:	4a98      	ldr	r2, [pc, #608]	; (80013b4 <HAL_GPIO_Init+0x2a4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d058      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 8001158:	4a96      	ldr	r2, [pc, #600]	; (80013b4 <HAL_GPIO_Init+0x2a4>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d86f      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 800115e:	4a96      	ldr	r2, [pc, #600]	; (80013b8 <HAL_GPIO_Init+0x2a8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d052      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 8001164:	4a94      	ldr	r2, [pc, #592]	; (80013b8 <HAL_GPIO_Init+0x2a8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d869      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 800116a:	4a94      	ldr	r2, [pc, #592]	; (80013bc <HAL_GPIO_Init+0x2ac>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d04c      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 8001170:	4a92      	ldr	r2, [pc, #584]	; (80013bc <HAL_GPIO_Init+0x2ac>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d863      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 8001176:	4a92      	ldr	r2, [pc, #584]	; (80013c0 <HAL_GPIO_Init+0x2b0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d046      	beq.n	800120a <HAL_GPIO_Init+0xfa>
 800117c:	4a90      	ldr	r2, [pc, #576]	; (80013c0 <HAL_GPIO_Init+0x2b0>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d85d      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 8001182:	2b12      	cmp	r3, #18
 8001184:	d82a      	bhi.n	80011dc <HAL_GPIO_Init+0xcc>
 8001186:	2b12      	cmp	r3, #18
 8001188:	d859      	bhi.n	800123e <HAL_GPIO_Init+0x12e>
 800118a:	a201      	add	r2, pc, #4	; (adr r2, 8001190 <HAL_GPIO_Init+0x80>)
 800118c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001190:	0800120b 	.word	0x0800120b
 8001194:	080011e5 	.word	0x080011e5
 8001198:	080011f7 	.word	0x080011f7
 800119c:	08001239 	.word	0x08001239
 80011a0:	0800123f 	.word	0x0800123f
 80011a4:	0800123f 	.word	0x0800123f
 80011a8:	0800123f 	.word	0x0800123f
 80011ac:	0800123f 	.word	0x0800123f
 80011b0:	0800123f 	.word	0x0800123f
 80011b4:	0800123f 	.word	0x0800123f
 80011b8:	0800123f 	.word	0x0800123f
 80011bc:	0800123f 	.word	0x0800123f
 80011c0:	0800123f 	.word	0x0800123f
 80011c4:	0800123f 	.word	0x0800123f
 80011c8:	0800123f 	.word	0x0800123f
 80011cc:	0800123f 	.word	0x0800123f
 80011d0:	0800123f 	.word	0x0800123f
 80011d4:	080011ed 	.word	0x080011ed
 80011d8:	08001201 	.word	0x08001201
 80011dc:	4a79      	ldr	r2, [pc, #484]	; (80013c4 <HAL_GPIO_Init+0x2b4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d013      	beq.n	800120a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011e2:	e02c      	b.n	800123e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e029      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	3304      	adds	r3, #4
 80011f2:	623b      	str	r3, [r7, #32]
          break;
 80011f4:	e024      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	3308      	adds	r3, #8
 80011fc:	623b      	str	r3, [r7, #32]
          break;
 80011fe:	e01f      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	330c      	adds	r3, #12
 8001206:	623b      	str	r3, [r7, #32]
          break;
 8001208:	e01a      	b.n	8001240 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001212:	2304      	movs	r3, #4
 8001214:	623b      	str	r3, [r7, #32]
          break;
 8001216:	e013      	b.n	8001240 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d105      	bne.n	800122c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001220:	2308      	movs	r3, #8
 8001222:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	611a      	str	r2, [r3, #16]
          break;
 800122a:	e009      	b.n	8001240 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800122c:	2308      	movs	r3, #8
 800122e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	615a      	str	r2, [r3, #20]
          break;
 8001236:	e003      	b.n	8001240 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
          break;
 800123c:	e000      	b.n	8001240 <HAL_GPIO_Init+0x130>
          break;
 800123e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	2bff      	cmp	r3, #255	; 0xff
 8001244:	d801      	bhi.n	800124a <HAL_GPIO_Init+0x13a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	e001      	b.n	800124e <HAL_GPIO_Init+0x13e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3304      	adds	r3, #4
 800124e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2bff      	cmp	r3, #255	; 0xff
 8001254:	d802      	bhi.n	800125c <HAL_GPIO_Init+0x14c>
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x152>
 800125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125e:	3b08      	subs	r3, #8
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	210f      	movs	r1, #15
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	401a      	ands	r2, r3
 8001274:	6a39      	ldr	r1, [r7, #32]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	fa01 f303 	lsl.w	r3, r1, r3
 800127c:	431a      	orrs	r2, r3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 80b1 	beq.w	80013f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001290:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <HAL_GPIO_Init+0x2b8>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a4c      	ldr	r2, [pc, #304]	; (80013c8 <HAL_GPIO_Init+0x2b8>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <HAL_GPIO_Init+0x2b8>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012a8:	4a48      	ldr	r2, [pc, #288]	; (80013cc <HAL_GPIO_Init+0x2bc>)
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	089b      	lsrs	r3, r3, #2
 80012ae:	3302      	adds	r3, #2
 80012b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	220f      	movs	r2, #15
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	4013      	ands	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a40      	ldr	r2, [pc, #256]	; (80013d0 <HAL_GPIO_Init+0x2c0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d013      	beq.n	80012fc <HAL_GPIO_Init+0x1ec>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a3f      	ldr	r2, [pc, #252]	; (80013d4 <HAL_GPIO_Init+0x2c4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00d      	beq.n	80012f8 <HAL_GPIO_Init+0x1e8>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a3e      	ldr	r2, [pc, #248]	; (80013d8 <HAL_GPIO_Init+0x2c8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d007      	beq.n	80012f4 <HAL_GPIO_Init+0x1e4>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a3d      	ldr	r2, [pc, #244]	; (80013dc <HAL_GPIO_Init+0x2cc>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d101      	bne.n	80012f0 <HAL_GPIO_Init+0x1e0>
 80012ec:	2303      	movs	r3, #3
 80012ee:	e006      	b.n	80012fe <HAL_GPIO_Init+0x1ee>
 80012f0:	2304      	movs	r3, #4
 80012f2:	e004      	b.n	80012fe <HAL_GPIO_Init+0x1ee>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e002      	b.n	80012fe <HAL_GPIO_Init+0x1ee>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <HAL_GPIO_Init+0x1ee>
 80012fc:	2300      	movs	r3, #0
 80012fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001300:	f002 0203 	and.w	r2, r2, #3
 8001304:	0092      	lsls	r2, r2, #2
 8001306:	4093      	lsls	r3, r2
 8001308:	68fa      	ldr	r2, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800130e:	492f      	ldr	r1, [pc, #188]	; (80013cc <HAL_GPIO_Init+0x2bc>)
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d006      	beq.n	8001336 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	492c      	ldr	r1, [pc, #176]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]
 8001334:	e006      	b.n	8001344 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	43db      	mvns	r3, r3
 800133e:	4928      	ldr	r1, [pc, #160]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001340:	4013      	ands	r3, r2
 8001342:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d006      	beq.n	800135e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4922      	ldr	r1, [pc, #136]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	43db      	mvns	r3, r3
 8001366:	491e      	ldr	r1, [pc, #120]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001368:	4013      	ands	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800137a:	689a      	ldr	r2, [r3, #8]
 800137c:	4918      	ldr	r1, [pc, #96]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	608b      	str	r3, [r1, #8]
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001386:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	43db      	mvns	r3, r3
 800138e:	4914      	ldr	r1, [pc, #80]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 8001390:	4013      	ands	r3, r2
 8001392:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d021      	beq.n	80013e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	490e      	ldr	r1, [pc, #56]	; (80013e0 <HAL_GPIO_Init+0x2d0>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60cb      	str	r3, [r1, #12]
 80013ac:	e021      	b.n	80013f2 <HAL_GPIO_Init+0x2e2>
 80013ae:	bf00      	nop
 80013b0:	10320000 	.word	0x10320000
 80013b4:	10310000 	.word	0x10310000
 80013b8:	10220000 	.word	0x10220000
 80013bc:	10210000 	.word	0x10210000
 80013c0:	10120000 	.word	0x10120000
 80013c4:	10110000 	.word	0x10110000
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010000 	.word	0x40010000
 80013d0:	40010800 	.word	0x40010800
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	40011000 	.word	0x40011000
 80013dc:	40011400 	.word	0x40011400
 80013e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_GPIO_Init+0x304>)
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	4909      	ldr	r1, [pc, #36]	; (8001414 <HAL_GPIO_Init+0x304>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	3301      	adds	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	f47f ae8e 	bne.w	8001124 <HAL_GPIO_Init+0x14>
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	372c      	adds	r7, #44	; 0x2c
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e272      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8087 	beq.w	8001546 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001438:	4b92      	ldr	r3, [pc, #584]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b04      	cmp	r3, #4
 8001442:	d00c      	beq.n	800145e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001444:	4b8f      	ldr	r3, [pc, #572]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b08      	cmp	r3, #8
 800144e:	d112      	bne.n	8001476 <HAL_RCC_OscConfig+0x5e>
 8001450:	4b8c      	ldr	r3, [pc, #560]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d10b      	bne.n	8001476 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145e:	4b89      	ldr	r3, [pc, #548]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d06c      	beq.n	8001544 <HAL_RCC_OscConfig+0x12c>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d168      	bne.n	8001544 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e24c      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147e:	d106      	bne.n	800148e <HAL_RCC_OscConfig+0x76>
 8001480:	4b80      	ldr	r3, [pc, #512]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a7f      	ldr	r2, [pc, #508]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	e02e      	b.n	80014ec <HAL_RCC_OscConfig+0xd4>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x98>
 8001496:	4b7b      	ldr	r3, [pc, #492]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a7a      	ldr	r2, [pc, #488]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800149c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b78      	ldr	r3, [pc, #480]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a77      	ldr	r2, [pc, #476]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e01d      	b.n	80014ec <HAL_RCC_OscConfig+0xd4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0xbc>
 80014ba:	4b72      	ldr	r3, [pc, #456]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a71      	ldr	r2, [pc, #452]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6e      	ldr	r2, [pc, #440]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e00b      	b.n	80014ec <HAL_RCC_OscConfig+0xd4>
 80014d4:	4b6b      	ldr	r3, [pc, #428]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a6a      	ldr	r2, [pc, #424]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	4b68      	ldr	r3, [pc, #416]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a67      	ldr	r2, [pc, #412]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f4:	f7ff f8ac 	bl	8000650 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff f8a8 	bl	8000650 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e200      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150e:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0xe4>
 800151a:	e014      	b.n	8001546 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff f898 	bl	8000650 <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff f894 	bl	8000650 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1ec      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	4b53      	ldr	r3, [pc, #332]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x10c>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d063      	beq.n	800161a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001552:	4b4c      	ldr	r3, [pc, #304]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00b      	beq.n	8001576 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800155e:	4b49      	ldr	r3, [pc, #292]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b08      	cmp	r3, #8
 8001568:	d11c      	bne.n	80015a4 <HAL_RCC_OscConfig+0x18c>
 800156a:	4b46      	ldr	r3, [pc, #280]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d116      	bne.n	80015a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001576:	4b43      	ldr	r3, [pc, #268]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <HAL_RCC_OscConfig+0x176>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d001      	beq.n	800158e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e1c0      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800158e:	4b3d      	ldr	r3, [pc, #244]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4939      	ldr	r1, [pc, #228]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	e03a      	b.n	800161a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ac:	4b36      	ldr	r3, [pc, #216]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff f84d 	bl	8000650 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ba:	f7ff f849 	bl	8000650 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e1a1      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015cc:	4b2d      	ldr	r3, [pc, #180]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	4927      	ldr	r1, [pc, #156]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e015      	b.n	800161a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_RCC_OscConfig+0x270>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff f82c 	bl	8000650 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fc:	f7ff f828 	bl	8000650 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e180      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	2b00      	cmp	r3, #0
 8001624:	d03a      	beq.n	800169c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d019      	beq.n	8001662 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <HAL_RCC_OscConfig+0x274>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001634:	f7ff f80c 	bl	8000650 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff f808 	bl	8000650 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e160      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_RCC_OscConfig+0x26c>)
 8001650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800165a:	2001      	movs	r0, #1
 800165c:	f000 faa6 	bl	8001bac <RCC_Delay>
 8001660:	e01c      	b.n	800169c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <HAL_RCC_OscConfig+0x274>)
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001668:	f7fe fff2 	bl	8000650 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166e:	e00f      	b.n	8001690 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001670:	f7fe ffee 	bl	8000650 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d908      	bls.n	8001690 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e146      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000
 8001688:	42420000 	.word	0x42420000
 800168c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	4b92      	ldr	r3, [pc, #584]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1e9      	bne.n	8001670 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80a6 	beq.w	80017f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ae:	4b8b      	ldr	r3, [pc, #556]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10d      	bne.n	80016d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	4b88      	ldr	r3, [pc, #544]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a87      	ldr	r2, [pc, #540]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]
 80016c6:	4b85      	ldr	r3, [pc, #532]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d2:	2301      	movs	r3, #1
 80016d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b82      	ldr	r3, [pc, #520]	; (80018e0 <HAL_RCC_OscConfig+0x4c8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d118      	bne.n	8001714 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016e2:	4b7f      	ldr	r3, [pc, #508]	; (80018e0 <HAL_RCC_OscConfig+0x4c8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a7e      	ldr	r2, [pc, #504]	; (80018e0 <HAL_RCC_OscConfig+0x4c8>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016ee:	f7fe ffaf 	bl	8000650 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016f6:	f7fe ffab 	bl	8000650 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b64      	cmp	r3, #100	; 0x64
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e103      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	4b75      	ldr	r3, [pc, #468]	; (80018e0 <HAL_RCC_OscConfig+0x4c8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f0      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d106      	bne.n	800172a <HAL_RCC_OscConfig+0x312>
 800171c:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a6e      	ldr	r2, [pc, #440]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	e02d      	b.n	8001786 <HAL_RCC_OscConfig+0x36e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <HAL_RCC_OscConfig+0x334>
 8001732:	4b6a      	ldr	r3, [pc, #424]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4a69      	ldr	r2, [pc, #420]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	6213      	str	r3, [r2, #32]
 800173e:	4b67      	ldr	r3, [pc, #412]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4a66      	ldr	r2, [pc, #408]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	e01c      	b.n	8001786 <HAL_RCC_OscConfig+0x36e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	2b05      	cmp	r3, #5
 8001752:	d10c      	bne.n	800176e <HAL_RCC_OscConfig+0x356>
 8001754:	4b61      	ldr	r3, [pc, #388]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	4a60      	ldr	r2, [pc, #384]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	6213      	str	r3, [r2, #32]
 8001760:	4b5e      	ldr	r3, [pc, #376]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a5d      	ldr	r2, [pc, #372]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	6213      	str	r3, [r2, #32]
 800176c:	e00b      	b.n	8001786 <HAL_RCC_OscConfig+0x36e>
 800176e:	4b5b      	ldr	r3, [pc, #364]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	4a5a      	ldr	r2, [pc, #360]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6213      	str	r3, [r2, #32]
 800177a:	4b58      	ldr	r3, [pc, #352]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a57      	ldr	r2, [pc, #348]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001780:	f023 0304 	bic.w	r3, r3, #4
 8001784:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d015      	beq.n	80017ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178e:	f7fe ff5f 	bl	8000650 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7fe ff5b 	bl	8000650 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0b1      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ac:	4b4b      	ldr	r3, [pc, #300]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0ee      	beq.n	8001796 <HAL_RCC_OscConfig+0x37e>
 80017b8:	e014      	b.n	80017e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7fe ff49 	bl	8000650 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7fe ff45 	bl	8000650 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e09b      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d8:	4b40      	ldr	r3, [pc, #256]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1ee      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d105      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ea:	4b3c      	ldr	r3, [pc, #240]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a3b      	ldr	r2, [pc, #236]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 8087 	beq.w	800190e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001800:	4b36      	ldr	r3, [pc, #216]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b08      	cmp	r3, #8
 800180a:	d061      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	2b02      	cmp	r3, #2
 8001812:	d146      	bne.n	80018a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001814:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <HAL_RCC_OscConfig+0x4cc>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7fe ff19 	bl	8000650 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001822:	f7fe ff15 	bl	8000650 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e06d      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001834:	4b29      	ldr	r3, [pc, #164]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001848:	d108      	bne.n	800185c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800184a:	4b24      	ldr	r3, [pc, #144]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	4921      	ldr	r1, [pc, #132]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800185c:	4b1f      	ldr	r3, [pc, #124]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a19      	ldr	r1, [r3, #32]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	430b      	orrs	r3, r1
 800186e:	491b      	ldr	r1, [pc, #108]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <HAL_RCC_OscConfig+0x4cc>)
 8001876:	2201      	movs	r2, #1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7fe fee9 	bl	8000650 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001882:	f7fe fee5 	bl	8000650 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e03d      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001894:	4b11      	ldr	r3, [pc, #68]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x46a>
 80018a0:	e035      	b.n	800190e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <HAL_RCC_OscConfig+0x4cc>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7fe fed2 	bl	8000650 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7fe fece 	bl	8000650 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e026      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x498>
 80018ce:	e01e      	b.n	800190e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e019      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40007000 	.word	0x40007000
 80018e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x500>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d001      	beq.n	800190e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000

0800191c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0d0      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001930:	4b6a      	ldr	r3, [pc, #424]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d910      	bls.n	8001960 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193e:	4b67      	ldr	r3, [pc, #412]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f023 0207 	bic.w	r2, r3, #7
 8001946:	4965      	ldr	r1, [pc, #404]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b63      	ldr	r3, [pc, #396]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b8      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d020      	beq.n	80019ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001978:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	4a58      	ldr	r2, [pc, #352]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800197e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001982:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4a52      	ldr	r2, [pc, #328]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800199a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	494d      	ldr	r1, [pc, #308]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d040      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b47      	ldr	r3, [pc, #284]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d115      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e07f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019da:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d109      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e073      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e06b      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f023 0203 	bic.w	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	4936      	ldr	r1, [pc, #216]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a0c:	f7fe fe20 	bl	8000650 <HAL_GetTick>
 8001a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	e00a      	b.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a14:	f7fe fe1c 	bl	8000650 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e053      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 020c 	and.w	r2, r3, #12
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d1eb      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d210      	bcs.n	8001a6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b24      	ldr	r3, [pc, #144]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 0207 	bic.w	r2, r3, #7
 8001a52:	4922      	ldr	r1, [pc, #136]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e032      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4916      	ldr	r1, [pc, #88]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aaa:	f000 f821 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	490a      	ldr	r1, [pc, #40]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	5ccb      	ldrb	r3, [r1, r3]
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_RCC_ClockConfig+0x1d0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd7e 	bl	80005cc <HAL_InitTick>

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40022000 	.word	0x40022000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	08001c70 	.word	0x08001c70
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000004 	.word	0x20000004

08001af0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af0:	b490      	push	{r4, r7}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xac>)
 8001af8:	1d3c      	adds	r4, r7, #4
 8001afa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b00:	f240 2301 	movw	r3, #513	; 0x201
 8001b04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	d002      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x40>
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d003      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0x46>
 8001b2e:	e02b      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b30:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b32:	623b      	str	r3, [r7, #32]
      break;
 8001b34:	e02b      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	0c9b      	lsrs	r3, r3, #18
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	3328      	adds	r3, #40	; 0x28
 8001b40:	443b      	add	r3, r7
 8001b42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d012      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	0c5b      	lsrs	r3, r3, #17
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	3328      	adds	r3, #40	; 0x28
 8001b5e:	443b      	add	r3, r7
 8001b60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b6a:	fb03 f202 	mul.w	r2, r3, r2
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	e004      	b.n	8001b82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	623b      	str	r3, [r7, #32]
      break;
 8001b86:	e002      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b8a:	623b      	str	r3, [r7, #32]
      break;
 8001b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3728      	adds	r7, #40	; 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc90      	pop	{r4, r7}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	08001c60 	.word	0x08001c60
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	007a1200 	.word	0x007a1200
 8001ba8:	003d0900 	.word	0x003d0900

08001bac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <RCC_Delay+0x34>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <RCC_Delay+0x38>)
 8001bba:	fba2 2303 	umull	r2, r3, r2, r3
 8001bbe:	0a5b      	lsrs	r3, r3, #9
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bc8:	bf00      	nop
  }
  while (Delay --);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1e5a      	subs	r2, r3, #1
 8001bce:	60fa      	str	r2, [r7, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f9      	bne.n	8001bc8 <RCC_Delay+0x1c>
}
 8001bd4:	bf00      	nop
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr
 8001be0:	20000000 	.word	0x20000000
 8001be4:	10624dd3 	.word	0x10624dd3

08001be8 <__libc_init_array>:
 8001be8:	b570      	push	{r4, r5, r6, lr}
 8001bea:	2600      	movs	r6, #0
 8001bec:	4d0c      	ldr	r5, [pc, #48]	; (8001c20 <__libc_init_array+0x38>)
 8001bee:	4c0d      	ldr	r4, [pc, #52]	; (8001c24 <__libc_init_array+0x3c>)
 8001bf0:	1b64      	subs	r4, r4, r5
 8001bf2:	10a4      	asrs	r4, r4, #2
 8001bf4:	42a6      	cmp	r6, r4
 8001bf6:	d109      	bne.n	8001c0c <__libc_init_array+0x24>
 8001bf8:	f000 f822 	bl	8001c40 <_init>
 8001bfc:	2600      	movs	r6, #0
 8001bfe:	4d0a      	ldr	r5, [pc, #40]	; (8001c28 <__libc_init_array+0x40>)
 8001c00:	4c0a      	ldr	r4, [pc, #40]	; (8001c2c <__libc_init_array+0x44>)
 8001c02:	1b64      	subs	r4, r4, r5
 8001c04:	10a4      	asrs	r4, r4, #2
 8001c06:	42a6      	cmp	r6, r4
 8001c08:	d105      	bne.n	8001c16 <__libc_init_array+0x2e>
 8001c0a:	bd70      	pop	{r4, r5, r6, pc}
 8001c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c10:	4798      	blx	r3
 8001c12:	3601      	adds	r6, #1
 8001c14:	e7ee      	b.n	8001bf4 <__libc_init_array+0xc>
 8001c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c1a:	4798      	blx	r3
 8001c1c:	3601      	adds	r6, #1
 8001c1e:	e7f2      	b.n	8001c06 <__libc_init_array+0x1e>
 8001c20:	08001c80 	.word	0x08001c80
 8001c24:	08001c80 	.word	0x08001c80
 8001c28:	08001c80 	.word	0x08001c80
 8001c2c:	08001c84 	.word	0x08001c84

08001c30 <memset>:
 8001c30:	4603      	mov	r3, r0
 8001c32:	4402      	add	r2, r0
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d100      	bne.n	8001c3a <memset+0xa>
 8001c38:	4770      	bx	lr
 8001c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8001c3e:	e7f9      	b.n	8001c34 <memset+0x4>

08001c40 <_init>:
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c42:	bf00      	nop
 8001c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c46:	bc08      	pop	{r3}
 8001c48:	469e      	mov	lr, r3
 8001c4a:	4770      	bx	lr

08001c4c <_fini>:
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4e:	bf00      	nop
 8001c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c52:	bc08      	pop	{r3}
 8001c54:	469e      	mov	lr, r3
 8001c56:	4770      	bx	lr
